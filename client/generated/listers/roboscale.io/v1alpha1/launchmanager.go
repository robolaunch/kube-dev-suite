/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robolaunch/kube-dev-suite/pkg/api/roboscale.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LaunchManagerLister helps list LaunchManagers.
// All objects returned here must be treated as read-only.
type LaunchManagerLister interface {
	// List lists all LaunchManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchManager, err error)
	// LaunchManagers returns an object that can list and get LaunchManagers.
	LaunchManagers(namespace string) LaunchManagerNamespaceLister
	LaunchManagerListerExpansion
}

// launchManagerLister implements the LaunchManagerLister interface.
type launchManagerLister struct {
	indexer cache.Indexer
}

// NewLaunchManagerLister returns a new LaunchManagerLister.
func NewLaunchManagerLister(indexer cache.Indexer) LaunchManagerLister {
	return &launchManagerLister{indexer: indexer}
}

// List lists all LaunchManagers in the indexer.
func (s *launchManagerLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchManager))
	})
	return ret, err
}

// LaunchManagers returns an object that can list and get LaunchManagers.
func (s *launchManagerLister) LaunchManagers(namespace string) LaunchManagerNamespaceLister {
	return launchManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchManagerNamespaceLister helps list and get LaunchManagers.
// All objects returned here must be treated as read-only.
type LaunchManagerNamespaceLister interface {
	// List lists all LaunchManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchManager, err error)
	// Get retrieves the LaunchManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LaunchManager, error)
	LaunchManagerNamespaceListerExpansion
}

// launchManagerNamespaceLister implements the LaunchManagerNamespaceLister
// interface.
type launchManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LaunchManagers in the indexer for a given namespace.
func (s launchManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchManager))
	})
	return ret, err
}

// Get retrieves the LaunchManager from the indexer for a given namespace and name.
func (s launchManagerNamespaceLister) Get(name string) (*v1alpha1.LaunchManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launchmanager"), name)
	}
	return obj.(*v1alpha1.LaunchManager), nil
}
