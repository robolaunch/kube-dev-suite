/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robolaunch/kube-dev-suite/pkg/api/roboscale.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BuildManagerLister helps list BuildManagers.
// All objects returned here must be treated as read-only.
type BuildManagerLister interface {
	// List lists all BuildManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BuildManager, err error)
	// BuildManagers returns an object that can list and get BuildManagers.
	BuildManagers(namespace string) BuildManagerNamespaceLister
	BuildManagerListerExpansion
}

// buildManagerLister implements the BuildManagerLister interface.
type buildManagerLister struct {
	indexer cache.Indexer
}

// NewBuildManagerLister returns a new BuildManagerLister.
func NewBuildManagerLister(indexer cache.Indexer) BuildManagerLister {
	return &buildManagerLister{indexer: indexer}
}

// List lists all BuildManagers in the indexer.
func (s *buildManagerLister) List(selector labels.Selector) (ret []*v1alpha1.BuildManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BuildManager))
	})
	return ret, err
}

// BuildManagers returns an object that can list and get BuildManagers.
func (s *buildManagerLister) BuildManagers(namespace string) BuildManagerNamespaceLister {
	return buildManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BuildManagerNamespaceLister helps list and get BuildManagers.
// All objects returned here must be treated as read-only.
type BuildManagerNamespaceLister interface {
	// List lists all BuildManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BuildManager, err error)
	// Get retrieves the BuildManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BuildManager, error)
	BuildManagerNamespaceListerExpansion
}

// buildManagerNamespaceLister implements the BuildManagerNamespaceLister
// interface.
type buildManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BuildManagers in the indexer for a given namespace.
func (s buildManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BuildManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BuildManager))
	})
	return ret, err
}

// Get retrieves the BuildManager from the indexer for a given namespace and name.
func (s buildManagerNamespaceLister) Get(name string) (*v1alpha1.BuildManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("buildmanager"), name)
	}
	return obj.(*v1alpha1.BuildManager), nil
}
