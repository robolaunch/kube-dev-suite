/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/robolaunch/kube-dev-suite/pkg/api/roboscale.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RobotIDELister helps list RobotIDEs.
// All objects returned here must be treated as read-only.
type RobotIDELister interface {
	// List lists all RobotIDEs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RobotIDE, err error)
	// RobotIDEs returns an object that can list and get RobotIDEs.
	RobotIDEs(namespace string) RobotIDENamespaceLister
	RobotIDEListerExpansion
}

// robotIDELister implements the RobotIDELister interface.
type robotIDELister struct {
	indexer cache.Indexer
}

// NewRobotIDELister returns a new RobotIDELister.
func NewRobotIDELister(indexer cache.Indexer) RobotIDELister {
	return &robotIDELister{indexer: indexer}
}

// List lists all RobotIDEs in the indexer.
func (s *robotIDELister) List(selector labels.Selector) (ret []*v1alpha1.RobotIDE, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RobotIDE))
	})
	return ret, err
}

// RobotIDEs returns an object that can list and get RobotIDEs.
func (s *robotIDELister) RobotIDEs(namespace string) RobotIDENamespaceLister {
	return robotIDENamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RobotIDENamespaceLister helps list and get RobotIDEs.
// All objects returned here must be treated as read-only.
type RobotIDENamespaceLister interface {
	// List lists all RobotIDEs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RobotIDE, err error)
	// Get retrieves the RobotIDE from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RobotIDE, error)
	RobotIDENamespaceListerExpansion
}

// robotIDENamespaceLister implements the RobotIDENamespaceLister
// interface.
type robotIDENamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RobotIDEs in the indexer for a given namespace.
func (s robotIDENamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RobotIDE, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RobotIDE))
	})
	return ret, err
}

// Get retrieves the RobotIDE from the indexer for a given namespace and name.
func (s robotIDENamespaceLister) Get(name string) (*v1alpha1.RobotIDE, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("robotide"), name)
	}
	return obj.(*v1alpha1.RobotIDE), nil
}
